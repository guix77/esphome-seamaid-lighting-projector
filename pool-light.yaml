substitutions:
  name: "pool-light"
  friendly_name: Pool light

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

logger:

api:
  encryption:
    key: "REPLACE_ME"

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

remote_transmitter:
  pin: GPIO2
  carrier_duty_percent: 100%

output:
  - platform: template
    id: pool_light
    type: binary
    write_action:
      - delay: 0s
          
light:
  - platform: binary
    name: "Pool Light"
    output: pool_light
    on_turn_on:
      - remote_transmitter.transmit_rc_switch_raw:
          code: '101100001101001010000000'
          protocol:
            pulse_length: 900
          repeat:
            times: 10
            wait_time: 0ms
    on_turn_off:
      - remote_transmitter.transmit_rc_switch_raw:
          code: '101100001101001010001111'
          protocol:
            pulse_length: 900
          repeat:
            times: 10
            wait_time: 0ms

select:
  - platform: template
    name: "Pool light mode"
    id: pool_light_mode
    options:
      - "Change en continu (lent)"
      - "Change en continu (rapide)"
      - "Change en continu (avec sauts)"
      - "Change toutes les 5s"
      - "Change toutes les 15s"
      - "Blanc"
      - "Bleu"
      - "Cyan"
      - "Cyan clair"
      - "Vert clair"
      - "Vert"
      - "Vert - jaune"
      - "Jaune"
      - "Jaune doré"
      - "Rouge"
      - "Violet"
    optimistic: true 
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Change en continu (lent)";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000011011'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Change en continu (rapide)";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000011100'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Change en continu (avec sauts)";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000011101'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Change toutes les 5s";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000011110'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Change toutes les 15s";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000011111'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Blanc";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100000'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Bleu";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100001'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Cyan";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100010'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Cyan clair";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100011'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Vert clair";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100100'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Vert";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100101'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Vert - jaune";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100110'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Jaune";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000100111'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Jaune doré";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000101000'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Rouge";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000101001'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms
        - if:
            condition:
              lambda: |-
                return id(pool_light_mode).state == "Violet";
            then:
              - remote_transmitter.transmit_rc_switch_raw:
                  code: '101100001101001000101010'
                  protocol:
                    pulse_length: 900
                  repeat:
                    times: 10
                    wait_time: 0ms 
